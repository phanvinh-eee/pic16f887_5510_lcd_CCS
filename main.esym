C L "MAIN" 0 18 1 "FUNCTION"
D G "__PCM__" 0 46 ""5.015""
D G "__DEVICE__" 0 46 "887"
D G "__DATE__" 0 46 ""14-Apr-16""
D G "__TIME__" 0 46 ""14:10:49"" "Standard Header file for the PIC16F887 device ////////////////"
c L "set_tris_a" 2 3 6 "FUNCTION"
v L "value" 2 39 "int8" `54 
f B "set_tris_a" 2 39 "void(int8 value)" `53 
v L "value" 2 40 "int8" `56 
f B "set_tris_b" 2 40 "void(int8 value)" `55 
v L "value" 2 41 "int8" `58 
f B "set_tris_c" 2 41 "void(int8 value)" `57 
v L "value" 2 42 "int8" `60 
f B "set_tris_d" 2 42 "void(int8 value)" `59 
v L "value" 2 43 "int8" `62 
f B "set_tris_e" 2 43 "void(int8 value)" `61 
f B "get_tris_a" 2 44 "int8()" `63 
f B "get_tris_b" 2 45 "int8()" `64 
f B "get_tris_c" 2 46 "int8()" `65 
f B "get_tris_d" 2 47 "int8()" `66 
f B "get_tris_e" 2 48 "int8()" `67 
v L "value" 2 49 "int8" `69 
f B "output_a" 2 49 "void(int8 value)" `68 
v L "value" 2 50 "int8" `71 
f B "output_b" 2 50 "void(int8 value)" `70 
v L "value" 2 51 "int8" `73 
f B "output_c" 2 51 "void(int8 value)" `72 
v L "value" 2 52 "int8" `75 
f B "output_d" 2 52 "void(int8 value)" `74 
v L "value" 2 53 "int8" `77 
f B "output_e" 2 53 "void(int8 value)" `76 
f B "input_a" 2 54 "int8()" `78 
f B "input_b" 2 55 "int8()" `79 
f B "input_c" 2 56 "int8()" `80 
f B "input_d" 2 57 "int8()" `81 
f B "input_e" 2 58 "int8()" `82 
f B "input_change_a" 2 59 "int8()" `83 
f B "input_change_b" 2 60 "int8()" `84 
f B "input_change_c" 2 61 "int8()" `85 
f B "input_change_d" 2 62 "int8()" `86 
f B "input_change_e" 2 63 "int8()" `87 
v L "pin" 2 64 "int16" `89 
f B "input" 2 64 "int8(int16 pin)" `88 
v L "pin" 2 65 "int16" `91 
f B "input_state" 2 65 "int8(int16 pin)" `90 
v L "pin" 2 66 "int16" `93 
f B "output_low" 2 66 "void(int16 pin)" `92 
v L "pin" 2 67 "int16" `95 
f B "output_high" 2 67 "void(int16 pin)" `94 
v L "pin" 2 68 "int16" `97 
f B "output_toggle" 2 68 "void(int16 pin)" `96 
v L "pin" 2 69 "int16" `99 
v L "level" 2 69 "int8" `100 
f B "output_bit" 2 69 "void(int16 pin,int8 level)" `98 
v L "pin" 2 70 "int16" `102 
f B "output_float" 2 70 "void(int16 pin)" `101 
v L "pin" 2 71 "int16" `104 
f B "output_drive" 2 71 "void(int16 pin)" `103  "Constants used to identify pins in the above are:"
d G "PIN_A0" 2 75 "40"
d G "PIN_A1" 2 76 "41"
d G "PIN_A2" 2 77 "42"
d G "PIN_A3" 2 78 "43"
d G "PIN_A4" 2 79 "44"
d G "PIN_A5" 2 80 "45"
d G "PIN_A6" 2 81 "46"
d G "PIN_A7" 2 82 "47"
d G "PIN_B0" 2 84 "48"
d G "PIN_B1" 2 85 "49"
d G "PIN_B2" 2 86 "50"
d G "PIN_B3" 2 87 "51"
d G "PIN_B4" 2 88 "52"
d G "PIN_B5" 2 89 "53"
d G "PIN_B6" 2 90 "54"
d G "PIN_B7" 2 91 "55"
d G "PIN_C0" 2 93 "56"
d G "PIN_C1" 2 94 "57"
d G "PIN_C2" 2 95 "58"
d G "PIN_C3" 2 96 "59"
d G "PIN_C4" 2 97 "60"
d G "PIN_C5" 2 98 "61"
d G "PIN_C6" 2 99 "62"
d G "PIN_C7" 2 100 "63"
d G "PIN_D0" 2 102 "64"
d G "PIN_D1" 2 103 "65"
d G "PIN_D2" 2 104 "66"
d G "PIN_D3" 2 105 "67"
d G "PIN_D4" 2 106 "68"
d G "PIN_D5" 2 107 "69"
d G "PIN_D6" 2 108 "70"
d G "PIN_D7" 2 109 "71"
d G "PIN_E0" 2 111 "72"
d G "PIN_E1" 2 112 "73"
d G "PIN_E2" 2 113 "74"
d G "PIN_E3" 2 114 "75"
d G "FALSE" 2 117 "0"
d G "TRUE" 2 118 "1"
d G "BYTE" 2 120 "int8"
d G "BOOLEAN" 2 121 "int1"
d G "getc" 2 123 "getch"
d G "fgetc" 2 124 "getch"
d G "getchar" 2 125 "getch"
d G "putc" 2 126 "putchar"
d G "fputc" 2 127 "putchar"
d G "fgets" 2 128 "gets"
d G "fputs" 2 129 "puts"
c L "output_drive" 2 3 3 "FUNCTION"
f B "restart_cause" 2 134 "int8()" `105 
f B "reset_cpu" 2 135 "void()" `106 
f B "sleep" 2 136 "void()" `107  "Constants returned from RESTART_CAUSE() are:"
d G "WDT_FROM_SLEEP" 2 138 "3"
d G "WDT_TIMEOUT" 2 139 "11"
d G "MCLR_FROM_SLEEP" 2 140 "19"
d G "MCLR_FROM_RUN" 2 141 "27"
d G "NORMAL_POWER_UP" 2 142 "25"
d G "BROWNOUT_RESTART" 2 143 "26"
c L "sleep" 2 3 5 "FUNCTION"
v L "mode" 2 150 "int8" `109 
f B "setup_timer_0" 2 150 "void(int8 mode)" `108 
v L "value" 2 151 "int8" `111 
f B "set_timer0" 2 151 "void(int8 value)" `110 
f B "get_timer0" 2 152 "int8()" `112 
v L "mode" 2 153 "int8" `114 
v L "prescaler" 2 153 "int8" `115 
f B "setup_counters" 2 153 "void(int8 mode,int8 prescaler)" `113 
v L "value" 2 154 "int8" `117 
f B "set_rtcc" 2 154 "void(int8 value)" `116 
f B "get_rtcc" 2 155 "int8()" `118  "Constants used for SETUP_TIMER_0() are:"
d G "T0_INTERNAL" 2 157 "0"
d G "T0_EXT_L_TO_H" 2 158 "32"
d G "T0_EXT_H_TO_L" 2 159 "48"
d G "T0_DIV_1" 2 161 "8"
d G "T0_DIV_2" 2 162 "0"
d G "T0_DIV_4" 2 163 "1"
d G "T0_DIV_8" 2 164 "2"
d G "T0_DIV_16" 2 165 "3"
d G "T0_DIV_32" 2 166 "4"
d G "T0_DIV_64" 2 167 "5"
d G "T0_DIV_128" 2 168 "6"
d G "T0_DIV_256" 2 169 "7"
d G "T0_8_BIT" 2 172 "0"
d G "RTCC_INTERNAL" 2 174 "0" "The following are provided for compatibility"
d G "RTCC_EXT_L_TO_H" 2 175 "32" "with older compiler versions"
d G "RTCC_EXT_H_TO_L" 2 176 "48"
d G "RTCC_DIV_1" 2 177 "8"
d G "RTCC_DIV_2" 2 178 "0"
d G "RTCC_DIV_4" 2 179 "1"
d G "RTCC_DIV_8" 2 180 "2"
d G "RTCC_DIV_16" 2 181 "3"
d G "RTCC_DIV_32" 2 182 "4"
d G "RTCC_DIV_64" 2 183 "5"
d G "RTCC_DIV_128" 2 184 "6"
d G "RTCC_DIV_256" 2 185 "7"
d G "RTCC_8_BIT" 2 186 "0"
c L "get_rtcc" 2 3 8 "FUNCTION"
v L "mode" 2 197 "int16" `120 
f B "setup_wdt" 2 197 "void(int16 mode)" `119 
f B "restart_wdt" 2 198 "void()" `121  "Constants used for SETUP_WDT() are:"
d G "WDT_18MS" 2 201 "8"
d G "WDT_36MS" 2 202 "9"
d G "WDT_72MS" 2 203 "10"
d G "WDT_144MS" 2 204 "11"
d G "WDT_288MS" 2 205 "12"
d G "WDT_576MS" 2 206 "13"
d G "WDT_1152MS" 2 207 "14"
d G "WDT_2304MS" 2 208 "15"
d G "WDT_ON" 2 213 "0x4000"
d G "WDT_OFF" 2 214 "0"
d G "WDT_DIV_16" 2 215 "0x100"
d G "WDT_DIV_8" 2 216 "0x300"
d G "WDT_DIV_4" 2 217 "0x500"
d G "WDT_DIV_2" 2 218 "0x700"
d G "WDT_TIMES_1" 2 219 "0x900" "Default"
d G "WDT_TIMES_2" 2 220 "0xB00"
d G "WDT_TIMES_4" 2 221 "0xD00"
d G "WDT_TIMES_8" 2 222 "0xF00"
d G "WDT_TIMES_16" 2 223 "0x1100"
d G "WDT_TIMES_32" 2 224 "0x1300"
d G "WDT_TIMES_64" 2 225 "0x1500"
d G "WDT_TIMES_128" 2 226 "0x1700"
c L "restart_wdt" 2 3 3 "FUNCTION"
v L "mode" 2 231 "int16" `123 
f B "setup_timer_1" 2 231 "void(int16 mode)" `122 
f B "get_timer1" 2 232 "int16()" `124 
v L "value" 2 233 "int16" `126 
f B "set_timer1" 2 233 "void(int16 value)" `125  "Constants used for SETUP_TIMER_1() are:"
d G "T1_DISABLED" 2 236 "0"
d G "T1_INTERNAL" 2 237 "5"
d G "T1_EXTERNAL" 2 238 "7"
d G "T1_EXTERNAL_SYNC" 2 239 "3"
d G "T1_CLK_OUT" 2 241 "8"
d G "T1_DIV_BY_1" 2 243 "0"
d G "T1_DIV_BY_2" 2 244 "0x10"
d G "T1_DIV_BY_4" 2 245 "0x20"
d G "T1_DIV_BY_8" 2 246 "0x30"
d G "T1_GATE" 2 248 "0x40"
d G "T1_GATE_INVERTED" 2 249 "0xC0"
c L "set_timer1" 2 3 3 "FUNCTION"
v L "mode" 2 254 "int8" `128 
v L "period" 2 254 "int8" `129 
v L "postscale" 2 254 "int8" `130 
f B "setup_timer_2" 2 254 "void(int8 mode,int8 period,int8 postscale)" `127 
f B "get_timer2" 2 255 "int8()" `131 
v L "value" 2 256 "int8" `133 
f B "set_timer2" 2 256 "void(int8 value)" `132  "Constants used for SETUP_TIMER_2() are:"
d G "T2_DISABLED" 2 258 "0"
d G "T2_DIV_BY_1" 2 259 "4"
d G "T2_DIV_BY_4" 2 260 "5"
d G "T2_DIV_BY_16" 2 261 "6"
c L "set_timer2" 2 3 4 "FUNCTION"
v L "mode" 2 267 "int32" `135 
f B "setup_ccp1" 2 267 "void(int32 mode)" `134 
v L "mode" 2 268 "int32" `137 
v L "pwm" 2 268 "int8" `138 
f G "setup_ccp1" 2 268 "void(int32 mode,int8 pwm)" `136 
v L "value" 2 269 "int16" `140 
f B "set_pwm1_duty" 2 269 "void(int16 value)" `139  "Constants used for SETUP_CCPx() are:"
d G "CCP_OFF" 2 271 "0"
d G "CCP_CAPTURE_FE" 2 272 "4"
d G "CCP_CAPTURE_RE" 2 273 "5"
d G "CCP_CAPTURE_DIV_4" 2 274 "6"
d G "CCP_CAPTURE_DIV_16" 2 275 "7"
d G "CCP_COMPARE_SET_ON_MATCH" 2 276 "8"
d G "CCP_COMPARE_CLR_ON_MATCH" 2 277 "9"
d G "CCP_COMPARE_INT" 2 278 "0xA"
d G "CCP_COMPARE_RESET_TIMER" 2 279 "0xB"
d G "CCP_PWM" 2 280 "0xC"
d G "CCP_PWM_PLUS_1" 2 281 "0x1c"
d G "CCP_PWM_PLUS_2" 2 282 "0x2c"
d G "CCP_PWM_PLUS_3" 2 283 "0x3c"
d G "CCP_PWM_H_H" 2 288 "0x0c"
d G "CCP_PWM_H_L" 2 289 "0x0d"
d G "CCP_PWM_L_H" 2 290 "0x0e"
d G "CCP_PWM_L_L" 2 291 "0x0f"
d G "CCP_PWM_FULL_BRIDGE" 2 293 "0x40"
d G "CCP_PWM_FULL_BRIDGE_REV" 2 294 "0xC0"
d G "CCP_PWM_HALF_BRIDGE" 2 295 "0x80"
d G "CCP_SHUTDOWN_ON_COMP1" 2 297 "0x100000"
d G "CCP_SHUTDOWN_ON_COMP2" 2 298 "0x200000"
d G "CCP_SHUTDOWN_ON_COMP" 2 299 "0x300000"
d G "CCP_SHUTDOWN_ON_INT0" 2 300 "0x400000"
d G "CCP_SHUTDOWN_ON_COMP1_INT0" 2 301 "0x500000"
d G "CCP_SHUTDOWN_ON_COMP2_INT0" 2 302 "0x600000"
d G "CCP_SHUTDOWN_ON_COMP_INT0" 2 303 "0x700000"
d G "CCP_SHUTDOWN_AC_L" 2 305 "0x000000"
d G "CCP_SHUTDOWN_AC_H" 2 306 "0x040000"
d G "CCP_SHUTDOWN_AC_F" 2 307 "0x080000"
d G "CCP_SHUTDOWN_BD_L" 2 309 "0x000000"
d G "CCP_SHUTDOWN_BD_H" 2 310 "0x010000"
d G "CCP_SHUTDOWN_BD_F" 2 311 "0x020000"
d G "CCP_SHUTDOWN_RESTART" 2 313 "0x80000000"
d G "CCP_PULSE_STEERING_A" 2 315 "0x01000000"
d G "CCP_PULSE_STEERING_B" 2 316 "0x02000000"
d G "CCP_PULSE_STEERING_C" 2 317 "0x04000000"
d G "CCP_PULSE_STEERING_D" 2 318 "0x08000000"
d G "CCP_PULSE_STEERING_SYNC" 2 319 "0x10000000"
c L "set_pwm1_duty" 2 3 1 "FUNCTION"
v L "mode" 2 323 "int32" `145 
f B "setup_ccp2" 2 323 "void(int32 mode)" `144 
v L "mode" 2 324 "int32" `147 
v L "pwm" 2 324 "int8" `148 
f G "setup_ccp2" 2 324 "void(int32 mode,int8 pwm)" `146 
v L "value" 2 325 "int16" `150 
f B "set_pwm2_duty" 2 325 "void(int16 value)" `149 
c L "set_pwm2_duty" 2 3 3 "FUNCTION"
v L "mode" 2 332 "int32" `155 
f B "setup_spi" 2 332 "void(int32 mode)" `154 
v L "value" 2 333 "int8" `157 
f B "spi_write" 2 333 "void(int8 value)" `156 
f B "spi_read" 2 334 "int8()" `158 
v L "value" 2 335 "int8" `160 
f G "spi_read" 2 335 "int8(int8 value)" `159 
f B "spi_data_in" 2 336 "int8()" `161  "Constants used in SETUP_SPI() are:"
d G "SPI_DISABLED" 2 338 "0x00"
d G "SPI_MASTER" 2 339 "0x20"
d G "SPI_SLAVE" 2 340 "0x24"
d G "SPI_SCK_IDLE_HIGH" 2 341 "0x10"
d G "SPI_SCK_IDLE_LOW" 2 342 "0x00"
d G "SPI_CLK_DIV_4" 2 343 "0x00"
d G "SPI_CLK_DIV_16" 2 344 "0x01"
d G "SPI_CLK_DIV_64" 2 345 "0x02"
d G "SPI_CLK_T2" 2 346 "0x03"
d G "SPI_SS_DISABLED" 2 347 "0x01"
d G "SPI_XMIT_L_TO_H" 2 349 "0x4000"
d G "SPI_XMIT_H_TO_L" 2 350 "0x0000"
d G "SPI_SAMPLE_AT_MIDDLE" 2 352 "0x0000"
d G "SPI_SAMPLE_AT_END" 2 353 "0x8000"
d G "SPI_L_TO_H" 2 356 "SPI_SCK_IDLE_LOW"
d G "SPI_H_TO_L" 2 357 "SPI_SCK_IDLE_HIGH"
c L "spi_data_in" 2 3 2 "FUNCTION"
v L "baud" 2 361 "int32" `163 
f B "setup_uart" 2 361 "void(int32 baud)" `162 
v L "baud" 2 362 "int32" `165 
v L "stream" 2 362 "int8" `166 
f G "setup_uart" 2 362 "void(int32 baud,int8 stream)" `164 
v L "baud" 2 363 "int32" `168 
v L "stream" 2 363 "int8" `169 
v L "clock" 2 363 "int32" `170 
f G "setup_uart" 2 363 "void(int32 baud,int8 stream,int32 clock)" `167 
v L "baud" 2 364 "int32" `172 
f B "set_uart_speed" 2 364 "void(int32 baud)" `171 
v L "baud" 2 365 "int32" `174 
v L "stream" 2 365 "int8" `175 
f G "set_uart_speed" 2 365 "void(int32 baud,int8 stream)" `173 
v L "baud" 2 366 "int32" `177 
v L "stream" 2 366 "int8" `178 
v L "clock" 2 366 "int32" `179 
f G "set_uart_speed" 2 366 "void(int32 baud,int8 stream,int32 clock)" `176  "Constants used in setup_uart() are:"
d G "UART_ADDRESS" 2 370 "2"
d G "UART_DATA" 2 371 "4"
d G "UART_AUTODETECT" 2 372 "8"
d G "UART_AUTODETECT_NOWAIT" 2 373 "9"
d G "UART_WAKEUP_ON_RDA" 2 374 "10"
d G "UART_SEND_BREAK" 2 375 "13"
c L "set_uart_speed" 2 3 3 "FUNCTION"
v L "mode" 2 379 "int32" `181 
f B "setup_comparator" 2 379 "void(int32 mode)" `180  "Constants used in setup_comparator() are:"
d G "NC_NC_NC_NC" 2 383 "0x00"
d G "NC_NC" 2 384 "0x00"
d G "CP1_A0_A3" 2 387 "0x00090080"
d G "CP1_A1_A3" 2 388 "0x000A0081"
d G "CP1_B3_A3" 2 389 "0x00880082"
d G "CP1_B1_A3" 2 390 "0x00280083"
d G "CP1_A0_VREF" 2 391 "0x00010084"
d G "CP1_A1_VREF" 2 392 "0x00020085"
d G "CP1_B3_VREF" 2 393 "0x00800086"
d G "CP1_B1_VREF" 2 394 "0x00200087"
d G "CP1_OUT_ON_A4" 2 396 "0x00000020"
d G "CP1_INVERT" 2 397 "0x00000010"
d G "CP1_ABSOLUTE_VREF" 2 398 "0x20000000"
d G "CP2_A0_A2" 2 401 "0x00058000"
d G "CP2_A1_A2" 2 402 "0x00068100"
d G "CP2_B3_A2" 2 403 "0x00848200"
d G "CP2_B1_A2" 2 404 "0x00248300"
d G "CP2_A0_VREF" 2 405 "0x00018400"
d G "CP2_A1_VREF" 2 406 "0x00028500"
d G "CP2_B3_VREF" 2 407 "0x00808600"
d G "CP2_B1_VREF" 2 408 "0x00208700"
d G "CP2_OUT_ON_A5" 2 410 "0x00002000"
d G "CP2_INVERT" 2 411 "0x00001000"
d G "CP2_ABSOLUTE_VREF" 2 412 "0x10000000"
d G "CP2_T1_SYNC" 2 415 "0x01000000"
d G "CP2_T1_GATE" 2 416 "0x02000000"
c L "setup_comparator" 2 3 2 "FUNCTION"
v L "mode" 2 424 "int8" `185 
f B "setup_vref" 2 424 "void(int8 mode)" `184  "Constants used in setup_vref() are:"
d G "VREF_LOW" 2 426 "0xa0"
d G "VREF_HIGH" 2 427 "0x80"
c L "setup_vref" 2 3 3 "FUNCTION"
v L "mode" 2 433 "int8" `187 
f B "setup_oscillator" 2 433 "int8(int8 mode)" `186  "Constants used in setup_oscillator() are:"
d G "OSC_31KHZ" 2 435 "1"
d G "OSC_125KHZ" 2 436 "0x11"
d G "OSC_250KHZ" 2 437 "0x21"
d G "OSC_500KHZ" 2 438 "0x31"
d G "OSC_1MHZ" 2 439 "0x41"
d G "OSC_2MHZ" 2 440 "0x51"
d G "OSC_4MHZ" 2 441 "0x61"
d G "OSC_8MHZ" 2 442 "0x71"
d G "OSC_INTRC" 2 443 "1"
d G "OSC_NORMAL" 2 444 "0"
d G "OSC_STATE_STABLE" 2 446 "4"
d G "OSC_31KHZ_STABLE" 2 447 "2"
c L "setup_oscillator" 2 3 4 "FUNCTION"
v L "mode" 2 455 "int16" `189 
f B "setup_adc" 2 455 "void(int16 mode)" `188 
f B "read_adc" 2 456 "int8()" `190 
v L "mode" 2 457 "int8" `192 
f G "read_adc" 2 457 "int8(int8 mode)" `191 
f G "read_adc" 2 458 "int16()" `193 
v L "mode" 2 459 "int8" `195 
f G "read_adc" 2 459 "int16(int8 mode)" `194 
f B "adc_done" 2 460 "int8()" `196  "Constants used for SETUP_ADC() are:"
d G "ADC_OFF" 2 462 "0" "ADC Off"
d G "ADC_CLOCK_DIV_2" 2 463 "0x100"
d G "ADC_CLOCK_DIV_8" 2 464 "0x40"
d G "ADC_CLOCK_DIV_32" 2 465 "0x80"
d G "ADC_CLOCK_INTERNAL" 2 466 "0xc0" "Internal 2-6us"
c L "adc_done" 2 3 1 "FUNCTION"
v L "pins" 2 469 "int32" `198 
f B "setup_adc_ports" 2 469 "void(int32 pins)" `197 
v L "pins" 2 470 "int32" `200 
v L "reference" 2 470 "int32" `201 
f G "setup_adc_ports" 2 470 "void(int32 pins,int32 reference)" `199 
v L "channel" 2 471 "int8" `203 
f B "set_adc_channel" 2 471 "void(int8 channel)" `202  "Constants used in SETUP_ADC_PORTS() are:"
d G "sAN0" 2 475 "1" "| A0"
d G "sAN1" 2 476 "2" "| A1"
d G "sAN2" 2 477 "4" "| A2"
d G "sAN3" 2 478 "8" "| A3"
d G "sAN4" 2 479 "16" "| A5"
d G "sAN5" 2 480 "32" "| E0"
d G "sAN6" 2 481 "64" "| E1"
d G "sAN7" 2 482 "128" "| E2"
d G "sAN8" 2 483 "0x10000" "| B2"
d G "sAN9" 2 484 "0x20000" "| B3"
d G "sAN10" 2 485 "0x40000" "| B1"
d G "sAN11" 2 486 "0x80000" "| B4"
d G "sAN12" 2 487 "0x100000" "| B0"
d G "sAN13" 2 488 "0x200000" "| B5"
d G "NO_ANALOGS" 2 489 "0" "None"
d G "ALL_ANALOG" 2 490 "0x1F00FF" "A0 A1 A2 A3 A5 E0 E1 E2 B0 B1 B2 B3 B4 B5"
d G "VSS_VDD" 2 493 "0x0000" "| Range 0-Vdd"
d G "VSS_VREF" 2 494 "0x1000" "| Range 0-Vref"
d G "VREF_VREF" 2 495 "0x3000" "| Range Vref-Vref"
d G "VREF_VDD" 2 496 "0x2000" "| Range Vref-Vdd"
d G "ADC_START_AND_READ" 2 499 "7" "This is the default if nothing is specified"
d G "ADC_START_ONLY" 2 500 "1"
d G "ADC_READ_ONLY" 2 501 "6"
c L "set_adc_channel" 2 3 3 "FUNCTION"
v L "x" 2 507 "sint8" `205 
f B "abs" 2 507 "sint8(sint8 x)" `204 
v L "x" 2 508 "sint16" `207 
f G "abs" 2 508 "sint16(sint16 x)" `206 
v L "x" 2 509 "sint32" `209 
f G "abs" 2 509 "sint32(sint32 x)" `208 
v L "x" 2 510 "float" `211 
f G "abs" 2 510 "float(float x)" `210 
v L "??65535" 2 511 "int8" `213 
v L "??65535" 2 511 "int8" `214 
f B "_mul" 2 511 "int16(int8 ,int8 )" `212 
v L "??65535" 2 512 "sint8" `213 
v L "??65535" 2 512 "sint8" `217 
f G "_mul" 2 512 "sint16(sint8 ,sint8 )" `215 
v L "??65535" 2 513 "int16" `213 
v L "??65535" 2 513 "int16" `220 
f G "_mul" 2 513 "int32(int16 ,int16 )" `218 
v L "??65535" 2 514 "sint16" `213 
v L "??65535" 2 514 "sint16" `223 
f G "_mul" 2 514 "sint32(sint16 ,sint16 )" `221  "Memory Manipulation Prototypes:"
v L "bank" 2 517 "int8" `225 
v L "offset" 2 517 "int8" `226 
f B "read_bank" 2 517 "int8(int8 bank,int8 offset)" `224 
v L "bank" 2 518 "int8" `228 
v L "offset" 2 518 "int8" `229 
v L "value" 2 518 "int8" `230 
f B "write_bank" 2 518 "void(int8 bank,int8 offset,int8 value)" `227 
v L "dest" 2 519 "*int8" `232 
v L "src" 2 519 "*int8" `233 
f B "strcpy" 2 519 "void(*int8 dest,*int8 src)" `231 
v L "dest" 2 520 "*int8" `235 
v L "src" 2 520 "*int8" `236 
f B "strcopy" 2 520 "void(*int8 dest,*int8 src)" `234 
v L "destination" 2 521 "*int8" `238 
v L "value" 2 521 "int8" `239 
v L "num" 2 521 "int16" `240 
f B "memset" 2 521 "void(*int8 destination,int8 value,int16 num)" `237 
v L "destination" 2 522 "*int8" `242 
v L "source" 2 522 "*int8" `243 
v L "num" 2 522 "int16" `244 
f B "memcpy" 2 522 "void(*int8 destination,*int8 source,int16 num)" `241  "String Prototypes:"
v L "cvalue" 2 525 "int8" `246 
f B "toupper" 2 525 "int8(int8 cvalue)" `245 
v L "cvalue" 2 526 "int8" `248 
f B "tolower" 2 526 "int8(int8 cvalue)" `247 
v L "string" 2 527 "*int8" `250 
v L "cstring" 2 527 "*int8" `251 
f B "sprintf" 2 527 "void(*int8 string,*int8 cstring,*int8 _VA_LIST)" `249  "Data Manipulators Prototypes:"
v L "address" 2 530 "*int8" `254 
v L "bytes" 2 530 "int8" `255 
v L "value" 2 530 "int8" `256 
f B "shift_left" 2 530 "int8(*int8 address,int8 bytes,int8 value)" `253 
v L "address" 2 531 "*int8" `258 
v L "bytes" 2 531 "int8" `259 
v L "value" 2 531 "int8" `260 
f B "shift_right" 2 531 "int8(*int8 address,int8 bytes,int8 value)" `257 
v L "address" 2 532 "*int8" `262 
v L "bytes" 2 532 "int8" `263 
f B "rotate_left" 2 532 "void(*int8 address,int8 bytes)" `261 
v L "address" 2 533 "*int8" `265 
v L "bytes" 2 533 "int8" `266 
f B "rotate_right" 2 533 "void(*int8 address,int8 bytes)" `264 
v L "value" 2 534 "int8" `268 
f B "swap" 2 534 "void(int8 value)" `267 
v L "var" 2 535 "int16" `270 
v L "offset" 2 535 "int8" `271 
f B "make8" 2 535 "int8(int16 var,int8 offset)" `269 
v L "var" 2 536 "int32" `270 
v L "offset" 2 536 "int8" `274 
f G "make8" 2 536 "int8(int32 var,int8 offset)" `272 
v L "varhigh" 2 537 "int8" `276 
v L "varlow" 2 537 "int8" `277 
f B "make16" 2 537 "int16(int8 varhigh,int8 varlow)" `275 
v L "var1" 2 538 "int16" `279 
f B "make32" 2 538 "int32(int16 var1)" `278 
v L "var1" 2 539 "int16" `281 
v L "var2" 2 539 "int16" `282 
f G "make32" 2 539 "int32(int16 var1,int16 var2)" `280 
v L "var1" 2 540 "int16" `281 
v L "var2" 2 540 "int8" `285 
f G "make32" 2 540 "int32(int16 var1,int8 var2)" `283 
v L "var1" 2 541 "int16" `287 
v L "var2" 2 541 "int8" `288 
v L "var3" 2 541 "int8" `289 
f G "make32" 2 541 "int32(int16 var1,int8 var2,int8 var3)" `286 
v L "var1" 2 542 "int8" `291 
f G "make32" 2 542 "int32(int8 var1)" `290 
v L "var1" 2 543 "int8" `281 
v L "var2" 2 543 "int8" `294 
f G "make32" 2 543 "int32(int8 var1,int8 var2)" `292 
v L "var1" 2 544 "int8" `287 
v L "var2" 2 544 "int8" `288 
v L "var3" 2 544 "int8" `298 
f G "make32" 2 544 "int32(int8 var1,int8 var2,int8 var3)" `295 
v L "var1" 2 545 "int8" `300 
v L "var2" 2 545 "int8" `301 
v L "var3" 2 545 "int8" `302 
v L "var4" 2 545 "int8" `303 
f G "make32" 2 545 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `299 
v L "var1" 2 546 "int8" `281 
v L "var2" 2 546 "int16" `306 
f G "make32" 2 546 "int32(int8 var1,int16 var2)" `304 
v L "var1" 2 547 "int8" `287 
v L "var2" 2 547 "int16" `288 
v L "var3" 2 547 "int8" `310 
f G "make32" 2 547 "int32(int8 var1,int16 var2,int8 var3)" `307 
v L "var1" 2 548 "int8" `287 
v L "var2" 2 548 "int8" `288 
v L "var3" 2 548 "int16" `314 
f G "make32" 2 548 "int32(int8 var1,int8 var2,int16 var3)" `311 
v L "var" 2 549 "int8" `316 
v L "bit" 2 549 "int8" `317 
f B "bit_set" 2 549 "void(int8 var,int8 bit)" `315 
v L "var" 2 550 "int16" `316 
v L "bit" 2 550 "int8" `320 
f G "bit_set" 2 550 "void(int16 var,int8 bit)" `318 
v L "var" 2 551 "int32" `316 
v L "bit" 2 551 "int8" `323 
f G "bit_set" 2 551 "void(int32 var,int8 bit)" `321 
v L "var" 2 552 "int8" `325 
v L "bit" 2 552 "int8" `326 
f B "bit_clear" 2 552 "void(int8 var,int8 bit)" `324 
v L "var" 2 553 "int16" `325 
v L "bit" 2 553 "int8" `329 
f G "bit_clear" 2 553 "void(int16 var,int8 bit)" `327 
v L "var" 2 554 "int32" `325 
v L "bit" 2 554 "int8" `332 
f G "bit_clear" 2 554 "void(int32 var,int8 bit)" `330 
v L "var" 2 555 "int8" `334 
v L "bit" 2 555 "int8" `335 
f B "bit_test" 2 555 "int8(int8 var,int8 bit)" `333 
v L "var" 2 556 "int16" `334 
v L "bit" 2 556 "int8" `338 
f G "bit_test" 2 556 "int8(int16 var,int8 bit)" `336 
v L "var" 2 557 "int32" `334 
v L "bit" 2 557 "int8" `341 
f G "bit_test" 2 557 "int8(int32 var,int8 bit)" `339  "#use delay() Prototypes:"
v L "count" 2 560 "int8" `343 
f B "delay_cycles" 2 560 "void(int8 count)" `342 
v L "time" 2 561 "int16" `345 
f B "delay_ms" 2 561 "void(int16 time)" `344 
v L "time" 2 562 "int16" `347 
f B "delay_us" 2 562 "void(int16 time)" `346  "#use rs232() Prototypes:"
v L "cdata" 2 565 "int8" `349 
f B "putchar" 2 565 "void(int8 cdata)" `348 
v L "cdata" 2 566 "int8" `351 
v L "stream" 2 566 "int8" `352 
f G "putchar" 2 566 "void(int8 cdata,int8 stream)" `350 
v L "string" 2 567 "*int8" `354 
f B "puts" 2 567 "void(*int8 string)" `353 
v L "string" 2 568 "*int8" `356 
v L "stream" 2 568 "int8" `357 
f G "puts" 2 568 "void(*int8 string,int8 stream)" `355 
f B "getch" 2 569 "int8()" `358 
v L "stream" 2 570 "int8" `360 
f G "getch" 2 570 "int8(int8 stream)" `359 
v L "string" 2 571 "*int8" `362 
f B "gets" 2 571 "void(*int8 string)" `361 
v L "string" 2 572 "*int8" `364 
v L "stream" 2 572 "int8" `365 
f G "gets" 2 572 "void(*int8 string,int8 stream)" `363 
f B "kbhit" 2 573 "int8()" `366 
v L "stream" 2 574 "int8" `368 
f G "kbhit" 2 574 "int8(int8 stream)" `367 
v L "string" 2 575 "*int8" `370 
f B "printf" 2 575 "void(*int8 string,*int8 _VA_LIST)" `369 
v L "stream" 2 576 "int8" `373 
v L "string" 2 576 "*int8" `374 
f B "fprintf" 2 576 "void(int8 stream,*int8 string,*int8 _VA_LIST)" `372 
f B "putc_send" 2 577 "void()" `376 
v L "stream" 2 578 "int8" `378 
f B "fputc_send" 2 578 "void(int8 stream)" `377 
f B "rcv_buffer_full" 2 579 "int8()" `379 
v L "stream" 2 580 "int8" `381 
f G "rcv_buffer_full" 2 580 "int8(int8 stream)" `380 
f B "rcv_buffer_bytes" 2 581 "int16()" `382 
v L "stream" 2 582 "int8" `384 
f G "rcv_buffer_bytes" 2 582 "int16(int8 stream)" `383 
f B "tx_buffer_full" 2 583 "int8()" `385 
v L "stream" 2 584 "int8" `387 
f G "tx_buffer_full" 2 584 "int8(int8 stream)" `386 
f B "tx_buffer_bytes" 2 585 "int16()" `388 
v L "stream" 2 586 "int8" `390 
f G "tx_buffer_bytes" 2 586 "int16(int8 stream)" `389  "#use i2c() Prototypes:"
f B "i2c_read" 2 589 "int8()" `391 
v L "stream" 2 590 "int8" `393 
f G "i2c_read" 2 590 "int8(int8 stream)" `392 
v L "stream" 2 591 "int8" `395 
v L "ack" 2 591 "int8" `396 
f G "i2c_read" 2 591 "int8(int8 stream,int8 ack)" `394 
v L "data" 2 592 "int8" `398 
f B "i2c_write" 2 592 "int8(int8 data)" `397 
v L "stream" 2 593 "int8" `400 
v L "data" 2 593 "int8" `401 
f G "i2c_write" 2 593 "int8(int8 stream,int8 data)" `399 
f B "i2c_start" 2 594 "void()" `402 
v L "stream" 2 595 "int8" `404 
f G "i2c_start" 2 595 "void(int8 stream)" `403 
v L "stream" 2 596 "int8" `406 
v L "restart" 2 596 "int8" `407 
f G "i2c_start" 2 596 "void(int8 stream,int8 restart)" `405 
f B "i2c_stop" 2 597 "void()" `408 
v L "stream" 2 598 "int8" `410 
f G "i2c_stop" 2 598 "void(int8 stream)" `409 
f B "i2c_isr_state" 2 599 "int8()" `411 
v L "addr" 2 600 "int8" `413 
f B "i2c_slaveaddr" 2 600 "void(int8 addr)" `412 
v L "stream" 2 601 "int8" `415 
v L "addr" 2 601 "int8" `416 
f G "i2c_slaveaddr" 2 601 "void(int8 stream,int8 addr)" `414 
f B "i2c_poll" 2 602 "int8()" `417 
v L "stream" 2 603 "int8" `419 
f G "i2c_poll" 2 603 "int8(int8 stream)" `418 
v L "baud" 2 604 "int32" `421 
f B "i2c_init" 2 604 "void(int32 baud)" `420 
v L "stream" 2 605 "int8" `423 
v L "baud" 2 605 "int32" `424 
f G "i2c_init" 2 605 "void(int8 stream,int32 baud)" `422  "#use spi() Prototypes:"
f B "spi_xfer" 2 608 "int8()" `425 
f G "spi_xfer" 2 609 "int16()" `426 
f G "spi_xfer" 2 610 "int32()" `427 
v L "data" 2 611 "int8" `429 
f G "spi_xfer" 2 611 "int8(int8 data)" `428 
v L "data" 2 612 "int16" `431 
f G "spi_xfer" 2 612 "int16(int16 data)" `430 
v L "data" 2 613 "int32" `433 
f G "spi_xfer" 2 613 "int32(int32 data)" `432 
v L "stream" 2 614 "int8" `435 
v L "data" 2 614 "int8" `436 
f G "spi_xfer" 2 614 "int8(int8 stream,int8 data)" `434 
v L "stream" 2 615 "int8" `435 
v L "data" 2 615 "int16" `439 
f G "spi_xfer" 2 615 "int16(int8 stream,int16 data)" `437 
v L "stream" 2 616 "int8" `435 
v L "data" 2 616 "int32" `442 
f G "spi_xfer" 2 616 "int32(int8 stream,int32 data)" `440 
v L "stream" 2 617 "int8" `444 
v L "data" 2 617 "int8" `445 
v L "bits" 2 617 "int8" `446 
f G "spi_xfer" 2 617 "int8(int8 stream,int8 data,int8 bits)" `443 
v L "stream" 2 618 "int8" `444 
v L "data" 2 618 "int16" `445 
v L "bits" 2 618 "int8" `450 
f G "spi_xfer" 2 618 "int16(int8 stream,int16 data,int8 bits)" `447 
v L "stream" 2 619 "int8" `444 
v L "data" 2 619 "int32" `445 
v L "bits" 2 619 "int8" `454 
f G "spi_xfer" 2 619 "int32(int8 stream,int32 data,int8 bits)" `451 
v L "baud" 2 620 "int32" `456 
f B "spi_init" 2 620 "void(int32 baud)" `455 
v L "stream" 2 621 "int8" `458 
v L "baud" 2 621 "int32" `459 
f G "spi_init" 2 621 "void(int8 stream,int32 baud)" `457 
v L "baud" 2 622 "int32" `461 
f B "spi_speed" 2 622 "void(int32 baud)" `460 
v L "stream" 2 623 "int8" `463 
v L "baud" 2 623 "int32" `464 
f G "spi_speed" 2 623 "void(int8 stream,int32 baud)" `462 
v L "stream" 2 624 "int8" `466 
v L "baud" 2 624 "int32" `467 
v L "clock" 2 624 "int32" `468 
f G "spi_speed" 2 624 "void(int8 stream,int32 baud,int32 clock)" `465 
v L "data" 2 625 "int8" `470 
f B "spi_prewrite" 2 625 "void(int8 data)" `469 
v L "data" 2 626 "int16" `472 
f G "spi_prewrite" 2 626 "void(int16 data)" `471 
v L "data" 2 627 "int32" `474 
f G "spi_prewrite" 2 627 "void(int32 data)" `473 
v L "??65535" 2 628 "int8" `476 
v L "data" 2 628 "int8" `477 
f G "spi_prewrite" 2 628 "void(int8 ,int8 data)" `475 
v L "??65535" 2 629 "int8" `476 
v L "data" 2 629 "int16" `480 
f G "spi_prewrite" 2 629 "void(int8 ,int16 data)" `478 
v L "??65535" 2 630 "int8" `476 
v L "data" 2 630 "int32" `483 
f G "spi_prewrite" 2 630 "void(int8 ,int32 data)" `481 
f B "spi_xfer_in" 2 631 "int8()" `484 
f G "spi_xfer_in" 2 632 "int16()" `485 
f G "spi_xfer_in" 2 633 "int32()" `486 
v L "bits" 2 634 "int8" `488 
f G "spi_xfer_in" 2 634 "int8(int8 bits)" `487 
v L "bits" 2 635 "int8" `490 
f G "spi_xfer_in" 2 635 "int16(int8 bits)" `489 
v L "bits" 2 636 "int8" `492 
f G "spi_xfer_in" 2 636 "int32(int8 bits)" `491 
v L "stream" 2 637 "int8" `494 
v L "bits" 2 637 "int8" `495 
f G "spi_xfer_in" 2 637 "int8(int8 stream,int8 bits)" `493 
v L "stream" 2 638 "int8" `494 
v L "bits" 2 638 "int8" `498 
f G "spi_xfer_in" 2 638 "int16(int8 stream,int8 bits)" `496 
v L "stream" 2 639 "int8" `494 
v L "bits" 2 639 "int8" `501 
f G "spi_xfer_in" 2 639 "int32(int8 stream,int8 bits)" `499  "#use rtos() Prototypes:"
f B "rtos_run" 2 642 "void()" `502 
f B "rtos_yield" 2 643 "void()" `503 
v L "task" 2 644 "int8" `505 
f B "rtos_enable" 2 644 "void(int8 task)" `504 
v L "task" 2 645 "int8" `507 
f B "rtos_disable" 2 645 "void(int8 task)" `506 
f B "rtos_terminate" 2 646 "void()" `508 
v L "flag" 2 647 "int8" `510 
f B "rtos_await" 2 647 "void(int8 flag)" `509 
v L "sem" 2 648 "int8" `512 
f B "rtos_wait" 2 648 "void(int8 sem)" `511 
v L "sem" 2 649 "int8" `514 
f B "rtos_signal" 2 649 "void(int8 sem)" `513 
v L "task" 2 650 "int8" `516 
v L "msg" 2 650 "int8" `517 
f B "rtos_msg_send" 2 650 "void(int8 task,int8 msg)" `515 
f B "rtos_msg_read" 2 651 "int8()" `518 
f B "rtos_msg_poll" 2 652 "int8()" `519 
v L "task" 2 653 "int8" `521 
f B "rtos_overrun" 2 653 "int8(int8 task)" `520 
v L "task" 2 654 "int8" `523 
v L "stat" 2 654 "*int8" `524 
f B "rtos_stats" 2 654 "void(int8 task,*int8 stat)" `522  "#use timer() Prototypes:"
f B "get_ticks" 2 657 "int8()" `525 
f G "get_ticks" 2 658 "int16()" `526 
f G "get_ticks" 2 659 "int32()" `527 
v L "stream" 2 660 "int8" `529 
f G "get_ticks" 2 660 "int8(int8 stream)" `528 
v L "stream" 2 661 "int8" `531 
f G "get_ticks" 2 661 "int16(int8 stream)" `530 
v L "stream" 2 662 "int8" `533 
f G "get_ticks" 2 662 "int32(int8 stream)" `532 
v L "value" 2 663 "int8" `535 
f B "set_ticks" 2 663 "void(int8 value)" `534 
v L "value" 2 664 "int16" `537 
f G "set_ticks" 2 664 "void(int16 value)" `536 
v L "value" 2 665 "int32" `539 
f G "set_ticks" 2 665 "void(int32 value)" `538 
v L "stream" 2 666 "int8" `541 
v L "value" 2 666 "int8" `542 
f G "set_ticks" 2 666 "void(int8 stream,int8 value)" `540 
v L "stream" 2 667 "int8" `541 
v L "value" 2 667 "int16" `545 
f G "set_ticks" 2 667 "void(int8 stream,int16 value)" `543 
v L "stream" 2 668 "int8" `541 
v L "value" 2 668 "int32" `548 
f G "set_ticks" 2 668 "void(int8 stream,int32 value)" `546  "#use pwm() Prototypes:"
f B "pwm_on" 2 671 "void()" `549 
v L "stream" 2 672 "int8" `551 
f G "pwm_on" 2 672 "void(int8 stream)" `550 
f B "pwm_off" 2 673 "void()" `552 
v L "stream" 2 674 "int8" `554 
f G "pwm_off" 2 674 "void(int8 stream)" `553 
v L "duty" 2 675 "int16" `556 
f B "pwm_set_duty" 2 675 "void(int16 duty)" `555 
v L "stream" 2 676 "int8" `558 
v L "duty" 2 676 "int16" `559 
f G "pwm_set_duty" 2 676 "void(int8 stream,int16 duty)" `557 
v L "percent" 2 677 "int16" `561 
f B "pwm_set_duty_percent" 2 677 "void(int16 percent)" `560 
v L "stream" 2 678 "int8" `563 
v L "percent" 2 678 "int16" `564 
f G "pwm_set_duty_percent" 2 678 "void(int8 stream,int16 percent)" `562 
v L "frequency" 2 679 "int32" `566 
f B "pwm_set_frequency" 2 679 "void(int32 frequency)" `565 
v L "stream" 2 680 "int8" `568 
v L "frequency" 2 680 "int32" `569 
f G "pwm_set_frequency" 2 680 "void(int8 stream,int32 frequency)" `567  "#use capture() Prototypes:"
f B "get_capture_time" 2 683 "int16()" `570 
v L "stream" 2 684 "int8" `572 
f G "get_capture_time" 2 684 "int16(int8 stream)" `571 
f B "get_capture_event" 2 685 "int8()" `573 
v L "stream" 2 686 "int8" `575 
f G "get_capture_event" 2 686 "int8(int8 stream)" `574  "Enviroment Prototypes:"
c L "get_capture_event" 2 3 2 "FUNCTION"
v L "address" 2 699 "int16" `577 
f B "goto_address" 2 699 "void(int16 address)" `576 
v L "label" 2 700 "int16" `579 
f B "label_address" 2 700 "int16(int16 label)" `578  "Program Memory Prototypes:"
v L "address" 2 703 "int16" `581 
v L "dataptr" 2 703 "*int8" `582 
v L "count" 2 703 "int16" `583 
f B "read_program_memory" 2 703 "void(int16 address,*int8 dataptr,int16 count)" `580 
v L "address" 2 704 "int16" `585 
f B "read_program_eeprom" 2 704 "int16(int16 address)" `584 
v L "address" 2 705 "int16" `587 
f B "erase_program_eeprom" 2 705 "void(int16 address)" `586 
v L "address" 2 706 "int16" `589 
v L "dataptr" 2 706 "*int8" `590 
v L "count" 2 706 "int16" `591 
f B "write_program_memory" 2 706 "void(int16 address,*int8 dataptr,int16 count)" `588 
v L "address" 2 707 "int16" `593 
v L "data" 2 707 "int16" `594 
f B "write_program_eeprom" 2 707 "void(int16 address,int16 data)" `592  "EEPROM Prototypes:"
t G "__EEADDRESS__" 2 712 "int16" `595 
v L "address" 2 717 "__EEADDRESS__" `597 
f B "read_eeprom" 2 717 "int8(__EEADDRESS__ address)" `596 
v L "address" 2 718 "__EEADDRESS__" `599 
v L "value" 2 718 "int8" `600 
f B "write_eeprom" 2 718 "void(__EEADDRESS__ address,int8 value)" `598  "INT"
c L "write_eeprom" 2 3 4 "FUNCTION"
v L "interrupt" 2 725 "int32" `602 
f B "enable_interrupts" 2 725 "void(int32 interrupt)" `601 
v L "interrupt" 2 726 "int32" `604 
f B "disable_interrupts" 2 726 "void(int32 interrupt)" `603 
v L "interrupt" 2 727 "int32" `606 
f B "clear_interrupt" 2 727 "void(int32 interrupt)" `605 
v L "interrupt" 2 728 "int32" `608 
f B "interrupt_active" 2 728 "int8(int32 interrupt)" `607 
v L "interrupt" 2 729 "int32" `610 
f B "interrupt_enabled" 2 729 "int8(int32 interrupt)" `609 
v L "source" 2 730 "int8" `612 
v L "edge" 2 730 "int8" `613 
f B "ext_int_edge" 2 730 "void(int8 source,int8 edge)" `611 
v L "address" 2 731 "int16" `615 
f B "jump_to_irs" 2 731 "void(int16 address)" `614  "Constants used in EXT_INT_EDGE() are:"
d G "L_TO_H" 2 733 "0x40"
d G "H_TO_L" 2 734 "0"
d G "GLOBAL" 2 736 "0x0BC0"
d G "PERIPH" 2 737 "0x0B40"
d G "INT_RTCC" 2 738 "0x000B20"
d G "INT_RB" 2 739 "0x01FF0B08"
d G "INT_EXT_L2H" 2 740 "0x50000B10"
d G "INT_EXT_H2L" 2 741 "0x60000B10"
d G "INT_EXT" 2 742 "0x000B10"
d G "INT_AD" 2 743 "0x008C40"
d G "INT_TBE" 2 744 "0x008C10"
d G "INT_RDA" 2 745 "0x008C20"
d G "INT_TIMER1" 2 746 "0x008C01"
d G "INT_TIMER2" 2 747 "0x008C02"
d G "INT_CCP1" 2 748 "0x008C04"
d G "INT_CCP2" 2 749 "0x008D01"
d G "INT_SSP" 2 750 "0x008C08"
d G "INT_BUSCOL" 2 751 "0x008D08"
d G "INT_EEPROM" 2 752 "0x008D10"
d G "INT_TIMER0" 2 753 "0x000B20"
d G "INT_OSC_FAIL" 2 754 "0x008D80"
d G "INT_COMP" 2 755 "0x008D20"
d G "INT_COMP2" 2 756 "0x008D40"
d G "INT_ULPWU" 2 757 "0x008D04"
d G "INT_RB0" 2 758 "0x1010B08"
d G "INT_RB1" 2 759 "0x1020B08"
d G "INT_RB2" 2 760 "0x1040B08"
d G "INT_RB3" 2 761 "0x1080B08"
d G "INT_RB4" 2 762 "0x1100B08"
d G "INT_RB5" 2 763 "0x1200B08"
d G "INT_RB6" 2 764 "0x1400B08"
d G "INT_RB7" 2 765 "0x1800B08"
C L "jump_to_irs" 1 9 1 "FUNCTION"
C L "jump_to_irs" 0 2 1 "FUNCTION"
D G "RTC_SCLK" 3 33 "PIN_B1"
D G "RTC_IO" 3 34 "PIN_B3"
D G "RTC_RST" 3 35 "PIN_B2"
V L "cmd" 3 39 "int8" `628 
F G "write_ds1302_byte" 3 39 "void(int8 cmd)" `627 
V L "i" 3 40 "int8" `629 
V L "cmd" 3 49 "int8" `631 
V L "data" 3 49 "int8" `632 
F G "write_ds1302" 3 49 "void(int8 cmd,int8 data)" `630 
V L "cmd" 3 57 "int8" `634 
F G "read_ds1302" 3 57 "int8(int8 cmd)" `633 
V L "i" 3 58 "int8" `635 
V L "data" 3 58 "int8" `636 
F G "rtc_init" 3 78 "void()" `637 
V L "x" 3 79 "int8" `638 
V L "data" 3 90 "int8" `640 
F G "get_bcd" 3 91 "int8(int8 data)" `639 
V L "nibh" 3 92 "int8" `641 
V L "nibl" 3 93 "int8" `642 
V L "data" 3 101 "int8" `650 
F G "rm_bcd" 3 102 "int8(int8 data)" `649 
V L "i" 3 103 "int8" `651 
V L "day" 3 112 "int8" `653 
V L "mth" 3 112 "int8" `654 
V L "year" 3 112 "int8" `655 
V L "dow" 3 112 "int8" `656 
V L "hr" 3 112 "int8" `657 
V L "min" 3 112 "int8" `658 
F G "rtc_set_datetime" 3 112 "void(int8 day,int8 mth,int8 year,int8 dow,int8 hr,int8 min)" `652 
V L "day" 3 123 "int8" `660 
V L "mth" 3 123 "int8" `661 
V L "year" 3 123 "int8" `662 
V L "dow" 3 123 "int8" `663 
F G "rtc_get_date" 3 123 "void(int8 day,int8 mth,int8 year,int8 dow)" `659 
V L "hr" 3 130 "int8" `665 
V L "min" 3 130 "int8" `666 
V L "sec" 3 130 "int8" `667 
F G "rtc_get_time" 3 130 "void(int8 hr,int8 min,int8 sec)" `664 
V L "address" 3 136 "int8" `669 
V L "data" 3 136 "int8" `670 
F G "rtc_write_nvr" 3 136 "void(int8 address,int8 data)" `668 
V L "address" 3 140 "int8" `672 
F G "rtc_read_nvr" 3 140 "int8(int8 address)" `671 
D G "DS18B20_C" 4 2 ""
D G "ONE_WIRE_C" 5 2 ""
C G "" 5 4 1 "*"
D G "ONE_WIRE_PIN" 5 8 "PIN_D1"
C L "onewire_reset" 5 10 1 "*"
C L "onewire_reset" 5 10 2 "*"
F G "onewire_reset" 5 15 "void()" `673 
C L "onewire_reset" 5 10 1 "FUNCTION"
C L "onewire_reset" 5 10 1 "FUNCTION"
C L "onewire_reset" 5 10 1 "FUNCTION"
C L "onewire_write" 5 24 1 "*"
C L "onewire_write" 5 24 1 "*"
C L "onewire_write" 5 24 1 "*"
V L "data" 5 29 "int8" `675 
F G "onewire_write" 5 29 "void(int8 data)" `674 
V L "count" 5 30 "int8" `676 
C L "onewire_write" 5 24 1 "FUNCTION"
C L "onewire_write" 5 24 1 "FUNCTION"
C L "onewire_write" 5 24 1 "FUNCTION"
C L "onewire_write" 5 24 1 "FUNCTION"
C L "onewire_write" 5 24 1 "FUNCTION"
C L "onewire_read" 5 42 1 "*"
C L "onewire_read" 5 42 1 "*"
F G "onewire_read" 5 46 "int8()" `677 
V L "count" 5 47 "int8" `678 
V L "data" 5 47 "int8" `679 
C L "onewire_read" 5 42 1 "FUNCTION"
C L "onewire_read" 5 42 1 "FUNCTION"
C L "onewire_read" 5 42 1 "FUNCTION"
C L "onewire_read" 5 42 1 "FUNCTION"
C L "onewire_read" 5 42 1 "FUNCTION"
D G "DISPLAY_C" 6 2 ""
D G "mode" 6 4 "PIN_B0"
D G "EDIT" 6 5 "PIN_D0"
D G "INC" 6 6 "PIN_D2"
D G "DEC" 6 7 "PIN_D3"
D G "lcd_sclk" 6 8 "PIN_A0"
D G "lcd_sda" 6 9 "PIN_A1"
D G "lcd_dc" 6 10 "PIN_A2"
D G "lcd_cs" 6 11 "PIN_A3"
D G "lcd_res" 6 12 "PIN_A5"
V G "TABLE1" 7 8 "[240]" `680  "ASCII table for NOKIA LCD: 96 rows * 5 bytes= 480 bytes"
V G "TABLE2" 7 58 "[240]" `683 
C L "nokia_init" 7 2 6 "FUNCTION"
f G "nokia_init" 7 115 "void()" `686 
V L "bytefornokia_command" 7 116 "int8" `688 
f G "nokia_write_command" 7 116 "void(int8 bytefornokia_command)" `687 
V L "bytefornokia_data" 7 117 "int8" `690 
f G "nokia_write_data" 7 117 "void(int8 bytefornokia_data)" `689 
V L "bytefornokia" 7 118 "int8" `692 
f G "nokia_write_dorc" 7 118 "void(int8 bytefornokia)" `691 
V L "xnokia" 7 119 "int8" `694 
V L "ynokia" 7 119 "int8" `695 
f G "nokia_gotoxy" 7 119 "void(int8 xnokia,int8 ynokia)" `693 
V L "contrast" 7 120 "int8" `697 
f G "nokia_contrast" 7 120 "void(int8 contrast)" `696 
V L "cvar" 7 121 "int8" `699 
f G "nokia_printchar" 7 121 "void(int8 cvar)" `698 
V L "cvar" 7 122 "int8" `701 
f G "nokia_printchar_inverted" 7 122 "void(int8 cvar)" `700 
f G "nokia_clean_ddram" 7 123 "void()" `702 
f G "table_to_nokialcd" 7 124 "void()" `703 
f G "table_to_nokialcd_inverted" 7 125 "void()" `704 
V L "x" 7 126 "int8" `706 
V L "y" 7 126 "int8" `707 
f G "LcdPixel" 7 126 "void(int8 x,int8 y)" `705 
V G "char_row" 7 128 "int8" `708 
V G "charsel" 7 128 "int8" `709 
V G "charpos" 7 128 "int8" `710 
V G "chardata" 7 128 "int8" `711 
V G "ddram" 7 129 "int16" `712 
F G "nokia_init" 7 131 "void()" `686 
C L "nokia_init" 7 2 1 "FUNCTION"
C L "nokia_init" 7 2 1 "FUNCTION"
C L "nokia_init" 7 2 1 "FUNCTION"
C L "nokia_init" 7 2 1 "FUNCTION"
C L "nokia_init" 7 2 1 "FUNCTION"
C L "nokia_init" 7 2 2 "FUNCTION"
C L "nokia_init" 7 2 1 "FUNCTION"
C L "nokia_init" 7 2 1 "FUNCTION"
C L "nokia_init" 7 2 1 "FUNCTION"
C L "nokia_init" 7 2 1 "FUNCTION"
F G "nokia_clean_ddram" 7 159 "void()" `702 
C L "nokia_clean_ddram" 7 2 1 "FUNCTION"
V L "bytefornokia_command" 7 165 "int8" `714 
F G "nokia_write_command" 7 166 "void(int8 bytefornokia_command)" `687 
C L "nokia_write_command" 7 2 1 "FUNCTION"
C L "nokia_write_command" 7 2 1 "FUNCTION"
C L "nokia_write_command" 7 2 1 "FUNCTION"
V L "bytefornokia_data" 7 175 "int8" `714 
F G "nokia_write_data" 7 176 "void(int8 bytefornokia_data)" `689 
C L "nokia_write_data" 7 2 1 "FUNCTION"
C L "nokia_write_data" 7 2 1 "FUNCTION"
V L "bytefornokia" 7 185 "int8" `714 
F G "nokia_write_dorc" 7 185 "void(int8 bytefornokia)" `691  "serial write data or command subroutine"
V L "caa" 7 186 "int8" `713 
V L "xnokia" 7 198 "int8" `694 
V L "ynokia" 7 198 "int8" `716 
F G "nokia_gotoxy" 7 198 "void(int8 xnokia,int8 ynokia)" `693  "Nokia LCD 3310 Position cursor"
C L "nokia_gotoxy" 7 2 1 "FUNCTION"
C L "nokia_gotoxy" 7 2 1 "FUNCTION"
V L "contrast" 7 203 "int8" `715 
F G "nokia_contrast" 7 203 "void(int8 contrast)" `696 
C L "nokia_contrast" 7 2 1 "FUNCTION"
C L "nokia_contrast" 7 2 1 "FUNCTION"
C L "nokia_contrast" 7 2 1 "FUNCTION"
V L "cvar" 7 209 "int8" `715 
F G "nokia_printchar" 7 209 "void(int8 cvar)" `698  "Write 1 character to LCD"
V L "cvar" 7 213 "int8" `715 
F G "nokia_printchar_inverted" 7 213 "void(int8 cvar)" `700  "Write 1 character to LCD"
F G "table_to_nokialcd" 7 217 "void()" `703  "extract ascii from tables & write to LCD"
C L "table_to_nokialcd" 7 2 1 "FUNCTION"
C L "table_to_nokialcd" 7 2 1 "FUNCTION"
C L "table_to_nokialcd" 7 2 1 "FUNCTION"
C L "table_to_nokialcd" 7 2 1 "FUNCTION"
F G "table_to_nokialcd_inverted" 7 230 "void()" `704  "extract ascii from tables & write to LCD"
C L "table_to_nokialcd_inverted" 7 2 1 "FUNCTION"
C L "table_to_nokialcd_inverted" 7 2 1 "FUNCTION"
C L "table_to_nokialcd_inverted" 7 2 1 "FUNCTION"
C L "table_to_nokialcd_inverted" 7 2 1 "FUNCTION"
V L "x" 7 243 "int8" `706 
V L "y" 7 243 "int8" `716 
F G "LcdPixel" 7 243 "void(int8 x,int8 y)" `705 
V L "offset" 7 244 "int8" `714 
V L "data" 7 245 "int8" `715 
D G "_STRING" 8 12 ""
D G "_STDDEF" 9 13 ""
D G "ptrdiff_t" 9 18 "unsigned int16"
D G "size_t" 9 24 "unsigned int16"
D G "wchar_t" 9 26 "char"
D G "NULL" 9 27 "0"
D G "offsetof" 9 29 "(s,f) (offsetofbit(s,f)/8)"
D G "_CTYPE" 10 12 ""
D G "islower" 10 14 "(x)  isamong(x,"abcdefghijklmnopqrstuvwxyz")"
D G "isupper" 10 15 "(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ")"
D G "isalnum" 10 16 "(x)  isamong(x,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")"
D G "isalpha" 10 17 "(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")"
D G "isdigit" 10 18 "(x)  isamong(x,"0123456789")"
D G "isspace" 10 19 "(x)  ((x)==' ')"
D G "isxdigit" 10 20 "(x) isamong(x,"0123456789ABCDEFabcdef")"
D G "iscntrl" 10 21 "(x)  ((x)<' ')"
D G "isprint" 10 22 "(x)  ((x)>=' ')"
D G "isgraph" 10 23 "(x)  ((x)>' ')"
D G "ispunct" 10 24 "(x)  (((x)>' ')&&!isalnum(x))"
C L "memmove" 8 19 10 "FUNCTION"
V L "s1" 8 34 "*int8" `717 
V L "s2" 8 34 "*int8" `718 
V L "n" 8 34 "int16" `719 
F G "memmove" 8 35 "*int8(*int8 s1,*int8 s2,int16 n)" `716 
V L "sc1" 8 36 "*int8" `720 
V L "sc2" 8 37 "*int8" `721 
D G "strcopy" 8 54 "strcpy"
C L "strncpy" 8 19 4 "FUNCTION"
V L "s1" 8 61 "*int8" `723 
V L "s2" 8 61 "*int8" `724 
V L "n" 8 61 "int16" `725 
F G "strncpy" 8 62 "*int8(*int8 s1,*int8 s2,int16 n)" `722 
V L "s" 8 63 "*int8" `726 
C L "strcat" 8 19 3 "FUNCTION"
V L "s1" 8 78 "*int8" `728 
V L "s2" 8 78 "*int8" `729 
F G "strcat" 8 79 "*int8(*int8 s1,*int8 s2)" `727 
V L "s" 8 80 "*int8" `730 
C L "strncat" 8 19 2 "FUNCTION"
V L "s1" 8 96 "*int8" `732 
V L "s2" 8 96 "*int8" `733 
V L "n" 8 96 "int16" `734 
F G "strncat" 8 97 "*int8(*int8 s1,*int8 s2,int16 n)" `731 
V L "s" 8 98 "*int8" `735 
C L "memcmp" 8 19 3 "FUNCTION"
V L "s1" 8 120 "*int8" `737 
V L "s2" 8 120 "*int8" `738 
V L "n" 8 120 "int16" `739 
F G "memcmp" 8 121 "sint8(*int8 s1,*int8 s2,int16 n)" `736 
V L "su1" 8 122 "*int8" `740 
V L "su2" 8 122 "*int8" `741 
C L "strcmp" 8 19 2 "FUNCTION"
V L "s1" 8 134 "*int8" `743 
V L "s2" 8 134 "*int8" `744 
F G "strcmp" 8 135 "sint8(*int8 s1,*int8 s2)" `742 
C L "strcoll" 8 19 2 "FUNCTION"
V L "s1" 8 144 "*int8" `746 
V L "s2" 8 144 "*int8" `747 
F G "strcoll" 8 145 "sint8(*int8 s1,*int8 s2)" `745 
C L "strncmp" 8 19 4 "FUNCTION"
V L "s1" 8 157 "*int8" `749 
V L "s2" 8 157 "*int8" `750 
V L "n" 8 157 "int16" `751 
F G "strncmp" 8 158 "sint8(*int8 s1,*int8 s2,int16 n)" `748 
C L "strxfrm" 8 19 3 "FUNCTION"
V L "s1" 8 169 "*int8" `753 
V L "s2" 8 169 "*int8" `754 
V L "n" 8 169 "int16" `755 
F G "strxfrm" 8 170 "int16(*int8 s1,*int8 s2,int16 n)" `752 
V L "s" 8 171 "*int8" `756 
V L "n1" 8 172 "int8" `757 
C L "memchr" 8 19 3 "FUNCTION"
V L "s" 8 191 "*int8" `759 
V L "c" 8 191 "int8" `760 
V L "n" 8 191 "int16" `761 
F G "memchr" 8 192 "*int8(*int8 s,int8 c,int16 n)" `758 
V L "uc" 8 193 "int8" `762 
V L "su" 8 194 "*int8" `763 
C L "strchr" 8 19 2 "FUNCTION"
V L "s" 8 205 "*int8" `765 
V L "c" 8 205 "int8" `766 
F G "strchr" 8 206 "*int8(*int8 s,int8 c)" `764 
C L "strcspn" 8 19 4 "FUNCTION"
V L "s1" 8 217 "*int8" `768 
V L "s2" 8 217 "*int8" `769 
F G "strcspn" 8 218 "int8(*int8 s1,*int8 s2)" `767 
V L "sc1" 8 219 "*int8" `770 
V L "sc2" 8 219 "*int8" `771 
C L "strpbrk" 8 19 4 "FUNCTION"
V L "s1" 8 232 "*int8" `773 
V L "s2" 8 232 "*int8" `774 
F G "strpbrk" 8 233 "*int8(*int8 s1,*int8 s2)" `772 
V L "sc1" 8 234 "*int8" `775 
V L "sc2" 8 234 "*int8" `776 
C L "strrchr" 8 19 2 "FUNCTION"
V L "s" 8 247 "*int8" `778 
V L "c" 8 247 "int8" `779 
F G "strrchr" 8 248 "*int8(*int8 s,int8 c)" `777 
V L "p" 8 249 "*int8" `780 
C L "strspn" 8 19 2 "FUNCTION"
V L "s1" 8 262 "*int8" `782 
V L "s2" 8 262 "*int8" `783 
F G "strspn" 8 263 "int8(*int8 s1,*int8 s2)" `781 
V L "sc1" 8 264 "*int8" `784 
V L "sc2" 8 264 "*int8" `785 
C L "strstr" 8 19 6 "FUNCTION"
V L "s1" 8 281 "*int8" `787 
V L "s2" 8 281 "*int8" `788 
F G "strstr" 8 282 "*int8(*int8 s1,*int8 s2)" `786 
V L "s" 8 283 "*int8" `789 
V L "t" 8 283 "*int8" `790 
C L "strtok" 8 19 13 "FUNCTION"
V L "s1" 8 320 "*int8" `792 
V L "s2" 8 320 "*int8" `793 
F G "strtok" 8 321 "*int8(*int8 s1,*int8 s2)" `791 
V L "beg" 8 322 "*int8" `794 
V L "end" 8 322 "*int8" `795 
V L "save" 8 323 "*int8" `796 
C L "strlen" 8 19 6 "FUNCTION"
V L "s" 8 369 "*int8" `798 
F G "strlen" 8 370 "int8(*int8 s)" `797 
V L "sc" 8 371 "*int8" `799 
C L "stricmp" 8 19 2 "FUNCTION"
V L "s1" 8 380 "*int8" `801 
V L "s2" 8 380 "*int8" `802 
F G "stricmp" 8 381 "sint8(*int8 s1,*int8 s2)" `800 
C L "strlwr" 8 19 3 "FUNCTION"
V L "s" 8 394 "*int8" `806 
F G "strlwr" 8 395 "*int8(*int8 s)" `805 
V L "p" 8 396 "*int8" `807 
C L "strupr" 8 19 3 "FUNCTION"
V L "s" 8 408 "*int8" `809 
F G "strupr" 8 409 "*int8(*int8 s)" `808 
V L "p" 8 410 "*int8" `810 
V G "clock_mode" 6 16 "int8" `811 
V G "setting_mode" 6 17 "int8" `812 
V G "alarm_mode" 6 18 "int8" `813 
V G "num_edit" 6 20 "int8" `814 
V G "mode_list" 6 21 "int8" `815 
V G "h_alarm" 6 22 "int8[5]" `816 
V G "m_alarm" 6 23 "int8[5]" `817 
V G "alarm_list" 6 24 "[5]" `818 
V G "h" 6 25 "int8" `821 
V G "m" 6 25 "int8" `822 
V G "s" 6 25 "int8" `823 
V G "h_edit" 6 26 "int8" `824 
V G "m_edit" 6 26 "int8" `825 
V G "day_edit" 6 26 "int8" `826 
V G "mth_edit" 6 26 "int8" `827 
V G "yea_edit" 6 26 "int8" `828 
V G "dow_edit" 6 26 "int8" `829 
V G "day" 6 27 "int8" `830 
V G "mth" 6 27 "int8" `831 
V G "yea" 6 27 "int8" `832 
V G "dow" 6 27 "int8" `833 
V G "set_alarm" 6 28 "int8[5]" `834 
V G "set_alarm_mode" 6 29 "int8" `835 
V G "set_time_mode" 6 30 "int8" `836 
V G "set_date_mode" 6 31 "int8" `837 
V G "temp" 6 32 "int8" `838 
C L "alarm_warning" 6 33 2 "FUNCTION"
f G "alarm_warning" 6 36 "void()" `839 
V L "h" 6 37 "int8" `841 
V L "m" 6 37 "int8" `842 
f G "edit_time" 6 37 "void(int8 h,int8 m)" `840 
V L "d" 6 38 "int8" `844 
V L "m" 6 38 "int8" `845 
V L "y" 6 38 "int8" `846 
V L "dayow" 6 38 "int8" `847 
f G "edit_date" 6 38 "void(int8 d,int8 m,int8 y,int8 dayow)" `843 
f G "clock_screen" 6 39 "void()" `848 
f G "alarm_screen" 6 40 "void()" `849 
f G "menu_screen" 6 41 "void()" `850 
V L "n" 6 42 "int8" `852 
f G "log_screen" 6 42 "void(int8 n)" `851 
f G "set_alarm_screen" 6 43 "void()" `853 
f G "display_screen" 6 44 "void()" `854 
f G "alarm_edit" 6 45 "void()" `855 
V L "n" 6 46 "int8" `857 
f G "button_ok" 6 46 "void(int8 n)" `856 
F G "alarm_warning" 6 48 "void()" `839 
V L "i" 6 49 "int8" `858 
C L "alarm_warning" 6 33 1 "FUNCTION"
F G "alarm_screen" 6 65 "void()" `849  "hien thi danh sach alarm"
V L "i" 6 66 "int8" `861 
V L "n" 6 92 "int8" `878 
F G "button_ok" 6 92 "void(int8 n)" `856 
F G "clock_screen" 6 112 "void()" `848 
V L "i" 6 113 "int8" `882 
V L "set" 6 114 "int8" `883 
F G "menu_screen" 6 158 "void()" `850  "hie thi man hinh menu"
V L "n" 6 181 "int8" `909 
F G "log_screen" 6 181 "void(int8 n)" `851  "man hinh thong bao"
F G "display_screen" 6 197 "void()" `854  "dieu khien viec hien thi cac man hinh"
C L "display_screen" 6 33 1 "FUNCTION"
C L "display_screen" 6 33 1 "FUNCTION"
C L "display_screen" 6 33 1 "FUNCTION"
C L "display_screen" 6 33 1 "FUNCTION"
V L "i" 6 224 "int8" `914 
F G "set_alarm_screen" 6 224 "void(int8 i)" `913  "man hinh tuy chon luu cai dat alarm"
F G "alarm_edit" 6 240 "void()" `855  "hien thi tuy chon chinh alarm"
V L "i" 6 241 "int8" `920 
V L "h" 6 263 "int8" `841 
V L "m" 6 263 "int8" `926 
F G "edit_time" 6 263 "void(int8 h,int8 m)" `840  "man hinh chinh gio"
V L "d" 6 288 "int8" `844 
V L "m" 6 288 "int8" `845 
V L "y" 6 288 "int8" `846 
V L "dayow" 6 288 "int8" `937 
F G "edit_date" 6 288 "void(int8 d,int8 m,int8 y,int8 dayow)" `843  "man hinh chinh ngay thang"
F G "control_time" 6 378 "void()" `962  "dieu khien nut bam"
C L "control_time" 6 33 1 "FUNCTION"
C L "control_time" 6 33 1 "FUNCTION"
C L "control_time" 6 33 1 "FUNCTION"
C L "control_time" 6 33 1 "FUNCTION"
C L "control_time" 6 33 1 "FUNCTION"
C L "control_time" 6 33 1 "FUNCTION"
C L "control_time" 6 33 1 "FUNCTION"
C L "control_time" 6 33 1 "FUNCTION"
C L "control_time" 6 33 1 "FUNCTION"
C L "control_time" 6 33 1 "FUNCTION"
C L "control_time" 6 33 1 "FUNCTION"
C L "control_time" 6 33 1 "FUNCTION"
C L "control_time" 6 33 1 "FUNCTION"
C L "control_time" 6 33 1 "FUNCTION"
C L "control_time" 6 33 1 "FUNCTION"
C L "control_time" 6 33 1 "FUNCTION"
C L "control_time" 6 33 1 "FUNCTION"
C L "control_time" 6 33 1 "FUNCTION"
C L "control_time" 6 33 1 "FUNCTION"
C L "control_time" 6 33 1 "FUNCTION"
C L "control_time" 6 33 1 "FUNCTION"
C L "control_time" 6 33 1 "FUNCTION"
C L "control_time" 6 33 1 "FUNCTION"
C L "control_time" 6 33 1 "FUNCTION"
C L "control_time" 6 33 1 "FUNCTION"
C L "control_time" 6 33 1 "FUNCTION"
C L "control_time" 6 33 1 "FUNCTION"
C L "control_time" 6 33 1 "FUNCTION"
C L "control_time" 6 33 1 "FUNCTION"
C L "control_time" 6 33 1 "FUNCTION"
C L "control_time" 6 33 1 "FUNCTION"
C L "control_time" 6 33 1 "FUNCTION"
C L "control_time" 6 33 1 "FUNCTION"
C L "control_time" 6 33 1 "FUNCTION"
C L "control_time" 6 33 1 "FUNCTION"
C L "control_time" 6 33 1 "FUNCTION"
C L "control_time" 6 33 1 "FUNCTION"
C L "control_time" 6 33 1 "FUNCTION"
C L "control_time" 6 33 1 "FUNCTION"
C L "control_time" 6 33 1 "FUNCTION"
C L "control_time" 6 33 2 "FUNCTION"
C L "control_time" 6 33 1 "FUNCTION"
C L "control_time" 6 33 1 "FUNCTION"
C L "control_time" 6 33 1 "FUNCTION"
V L "tem" 4 5 "int8" `966 
f G "ds18b20_read" 4 5 "int8(int8 tem)" `965 
V L "TH" 4 6 "int8" `968 
V L "TL" 4 6 "int8" `969 
V L "config" 4 6 "int8" `970 
f G "ds18b20_configure" 4 6 "void(int8 TH,int8 TL,int8 config)" `967  "* ds1820_read()"
C L "ds18b20_configure" 4 8 1 "*"
C L "ds18b20_configure" 4 8 1 "*"
V L "tem" 4 14 "int8" `972 
F G "ds18b20_read" 4 14 "int8(int8 tem)" `965 
V L "busy" 4 15 "int8" `971 
V L "temp1" 4 15 "int8" `972 
V L "temp2" 4 15 "int8" `973 
V L "temp3" 4 16 "sint16" `974 
V L "result" 4 17 "int8" `975 
C L "ds18b20_read" 4 8 1 "FUNCTION"
C L "ds18b20_read" 4 8 1 "FUNCTION"
C L "ds18b20_read" 4 8 1 "FUNCTION"
C L "ds18b20_read" 4 8 1 "FUNCTION"
C L "ds18b20_read" 4 8 1 "FUNCTION"
C L "ds18b20_read" 4 8 1 "FUNCTION"
C L "ds18b20_read" 4 8 1 "FUNCTION"
C L "ds18b20_read" 4 8 1 "FUNCTION"
C L "ds18b20_configure" 4 36 1 "*"
C L "ds18b20_configure" 4 36 1 "*"
C L "ds18b20_configure" 4 36 1 "*"
V L "TH" 4 42 "int8" `968 
V L "TL" 4 42 "int8" `969 
V L "config" 4 42 "int8" `979 
F G "ds18b20_configure" 4 42 "void(int8 TH,int8 TL,int8 config)" `967 
C L "ds18b20_configure" 4 36 1 "FUNCTION"
C L "ds18b20_configure" 4 36 1 "FUNCTION"
D G "_STDLIB" 11 12 ""
D G "RAND_MAX" 11 19 "32767" "The value of which is the maximum value"
D G "LONG_POINTERS" 11 25 "1"
T G "div_t" 11 33 "{sint8 quot,sint8 rem}" `979 
T G "ldiv_t" 11 38 "{sint16 quot,sint16 rem}" `983  "(C) Copyright 1996,2003 Custom Computer Services           ////"
C L "atoi" 9 3 6 "FUNCTION"
C L "atoi" 11 43 2 "FUNCTION"
C L "atoi" 11 46 1 "*"
C L "atoi" 11 46 1 "*"
V L "s" 11 50 "*int8" `985 
f G "atoi" 11 50 "sint8(*int8 s)" `984  "Syntax: signed int32  atoi32(char * s)"
V L "s" 11 58 "*int8" `987 
f G "atoi32" 11 58 "sint32(*int8 s)" `986  "Syntax: char *  itoa(signed int32 num, int8 base, char * s)"
C L "atoi32" 11 46 2 "FUNCTION"
V L "num" 11 79 "sint32" `989 
V L "base" 11 79 "int8" `990 
V L "s" 11 79 "*int8" `991 
f G "itoa" 11 79 "*int8(sint32 num,int8 base,*int8 s)" `988  "Standard template: signed int16  atol(char * s)"
C L "itoa" 11 81 1 "*"
C L "itoa" 11 81 1 "*"
V L "s" 11 85 "*int8" `993 
f G "atol" 11 85 "sint16(*int8 s)" `992  "Standard template: int16 strtoul(char * s,char *endptr,signed int base)"
C L "atol" 11 87 1 "*"
C L "atol" 11 87 1 "*"
C L "atol" 11 87 1 "*"
C L "atol" 11 87 1 "*"
V L "s" 11 93 "*int8" `995 
V L "endptr" 11 93 "*int8" `996 
V L "base" 11 93 "sint8" `997 
f G "strtol" 11 93 "sint16(*int8 s,*int8 endptr,sint8 base)" `994  "Standard template: int16 strtoul(char * s,char *endptr,signed int base)"
C L "strtol" 11 95 1 "*"
C L "strtol" 11 95 1 "*"
C L "strtol" 11 95 1 "*"
C L "strtol" 11 95 1 "*"
V L "s" 11 101 "*int8" `999 
V L "endptr" 11 101 "*int8" `1000 
V L "base" 11 101 "sint8" `1001 
f G "strtoul" 11 101 "int16(*int8 s,*int8 endptr,sint8 base)" `998  "Standart template: float strtof(char * s,char *endptr)"
C L "strtoul" 11 95 2 "FUNCTION"
C L "strtoul" 11 103 1 "*"
C L "strtoul" 11 103 1 "*"
C L "strtoul" 11 103 1 "*"
V L "s" 11 110 "*int8" `1003 
V L "endptr" 11 110 "*int8" `1004 
f G "strtof" 11 110 "float(*int8 s,*int8 endptr)" `1002  "provided for compatibility"
D G "strtof48" 11 116 "(s, e) strtof(s, e)"
D G "strtod" 11 117 "(s, e) strtof(s, e)"
C L "strtof" 11 103 1 "FUNCTION"
C L "strtof" 11 120 1 "*"
D G "atof" 11 124 "(s)   strtof(s, 0)"
C L "strtof" 11 120 1 "FUNCTION"
C L "strtof" 11 143 1 "*"
C L "strtof" 11 143 1 "*"
C L "strtof" 11 143 1 "*"
V L "s" 11 149 "*int8" `1006 
f G "atoe" 11 149 "float(*int8 s)" `1005  "Pseudo-random sequence generation functions"
C L "atoe" 11 143 1 "FUNCTION"
C L "atoe" 11 160 1 "*"
C L "atoe" 11 160 1 "*"
C L "atoe" 11 160 1 "*"
C L "atoe" 11 160 1 "*"
C L "atoe" 11 160 1 "*"
f G "rand" 11 169 "int16()" `1007  "The srand function uses the argument as a seed for a new sequence of"
C L "rand" 11 171 1 "*"
C L "rand" 11 171 1 "*"
C L "rand" 11 171 1 "*"
C L "rand" 11 171 1 "*"
C L "rand" 11 171 1 "*"
C L "rand" 11 171 1 "*"
C L "rand" 11 171 1 "*"
C L "rand" 11 171 1 "*"
C L "rand" 11 171 1 "*"
C L "rand" 11 171 1 "*"
C L "rand" 11 171 1 "*"
C L "rand" 11 171 1 "*"
C L "rand" 11 171 1 "*"
C L "rand" 11 171 1 "*"
C L "rand" 11 171 1 "*"
V L "seed" 11 191 "int32" `1009 
f G "srand" 11 191 "void(int32 seed)" `1008  "Memory management functions"
C L "srand" 11 171 3 "FUNCTION"
V L "string" 11 205 "*int8" `1011 
f G "system" 11 205 "sint8(*int8 string)" `1010  "Searching and sorting utilities"
C L "system" 11 171 1 "FUNCTION"
C L "system" 11 211 1 "*"
C L "system" 11 211 1 "*"
C L "system" 11 211 1 "*"
C L "system" 11 211 1 "*"
C L "system" 11 211 1 "*"
C L "system" 11 211 1 "*"
C L "system" 11 211 1 "*"
C L "system" 11 211 1 "*"
C L "system" 11 211 1 "*"
C L "system" 11 211 1 "*"
C L "system" 11 211 4 "*"
C L "system" 11 229 1 "*"
C L "system" 11 229 1 "*"
C L "system" 11 229 1 "*"
C L "system" 11 229 1 "*"
C L "system" 11 229 1 "*"
C L "system" 11 229 1 "*"
C L "system" 11 229 1 "*"
C L "system" 11 229 1 "*"
D G "labs" 11 249 "abs"
V L "numer" 11 251 "sint8" `1013 
V L "denom" 11 251 "sint8" `1014 
f G "div" 11 251 "div_t(sint8 numer,sint8 denom)" `1012 
V L "numer" 11 252 "sint16" `1016 
V L "denom" 11 252 "sint16" `1017 
f G "ldiv" 11 252 "ldiv_t(sint16 numer,sint16 denom)" `1015  "Multibyte character functions"
C L "ldiv" 11 229 4 "FUNCTION"
C L "ldiv" 9 2 7 "FUNCTION"
C L "ldiv" 8 2 7 "FUNCTION"
V L "numer" 11 274 "sint8" `1013 
V L "denom" 11 274 "sint8" `1020 
F G "div" 11 275 "div_t(sint8 numer,sint8 denom)" `1012 
V L "val" 11 276 "div_t" `1018 
V L "numer" 11 282 "sint16" `1016 
V L "denom" 11 282 "sint16" `1024 
F G "ldiv" 11 283 "ldiv_t(sint16 numer,sint16 denom)" `1015 
V L "val" 11 284 "ldiv_t" `1022 
V L "s" 11 361 "*int8" `1030 
F G "atoe" 11 362 "float(*int8 s)" `1005 
V L "pow10" 11 363 "float" `1029 
V L "result" 11 364 "float" `1030 
V L "sign" 11 365 "int8" `1031 
V L "expsign" 11 366 "int8" `1032 
V L "c" 11 367 "int8" `1033 
V L "ptr" 11 368 "int8" `1034 
V L "i" 11 369 "int8" `1035 
V L "exp" 11 370 "float" `1036 
V L "expcnt" 11 371 "int8" `1037 
C L "atoe" 11 397 1 "FUNCTION"
V L "s" 11 429 "*int8" `1050 
F G "atoi" 11 430 "sint8(*int8 s)" `984 
V L "result" 11 431 "sint8" `1049 
V L "sign" 11 432 "int8" `1050 
V L "base" 11 432 "int8" `1051 
V L "index" 11 432 "int8" `1052 
V L "c" 11 433 "int8" `1053 
C L "atoi" 11 397 1 "FUNCTION"
C L "atoi" 11 397 1 "FUNCTION"
C L "atoi" 11 397 1 "FUNCTION"
C L "atoi" 11 397 1 "FUNCTION"
C L "atoi" 11 397 1 "FUNCTION"
C L "atoi" 11 397 1 "FUNCTION"
V L "s" 11 498 "*int8" `1055 
F G "atol" 11 499 "sint16(*int8 s)" `992 
V L "result" 11 500 "sint16" `1054 
V L "sign" 11 501 "int8" `1055 
V L "base" 11 501 "int8" `1056 
V L "index" 11 501 "int8" `1057 
V L "c" 11 502 "int8" `1058 
C L "atol" 11 397 1 "FUNCTION"
C L "atol" 11 397 1 "FUNCTION"
C L "atol" 11 397 1 "FUNCTION"
C L "atol" 11 397 1 "FUNCTION"
C L "mult_with10" 11 397 1 "FUNCTION"
V L "num" 11 565 "int32" `1060 
F G "mult_with10" 11 566 "sint32(int32 num)" `1059 
V L "s" 11 571 "*int8" `1062 
F G "atoi32" 11 572 "sint32(*int8 s)" `986 
V L "result" 11 573 "sint32" `1061 
V L "sign" 11 574 "int8" `1062 
V L "base" 11 574 "int8" `1063 
V L "index" 11 574 "int8" `1064 
V L "c" 11 575 "int8" `1065 
C L "atoi32" 11 397 1 "FUNCTION"
C L "atoi32" 11 397 1 "FUNCTION"
C L "atoi32" 11 397 1 "FUNCTION"
C L "atoi32" 11 397 1 "FUNCTION"
C L "atoi32" 11 397 1 "FUNCTION"
V L "num" 11 770 "sint32" `989 
V L "base" 11 770 "int8" `990 
V L "s" 11 770 "*int8" `1069 
F G "itoa" 11 771 "*int8(sint32 num,int8 base,*int8 s)" `988 
V L "temp" 11 772 "int32" `1066 
V L "i" 11 773 "int8" `1067 
V L "sign" 11 773 "int8" `1068 
V L "cnt" 11 773 "int8" `1069 
V L "c" 11 774 "int8" `1070 
C L "itoa" 11 397 1 "FUNCTION"
C L "itoa" 11 397 1 "FUNCTION"
C L "itoa" 11 397 1 "FUNCTION"
C L "itoa" 11 397 1 "FUNCTION"
C L "itoa" 11 397 1 "FUNCTION"
V L "s" 11 885 "*int8" `1003 
V L "endptr" 11 885 "*int8" `1079 
F G "strtof" 11 886 "float(*int8 s,*int8 endptr)" `1002 
V L "pow10" 11 887 "float" `1077 
V L "result" 11 888 "float" `1078 
V L "skip" 11 889 "int1" `1079 
V L "sign" 11 889 "int1" `1080 
V L "point" 11 889 "int1" `1081 
V L "c" 11 890 "int8" `1082 
V L "ptr" 11 891 "int8" `1083 
V L "s" 11 1103 "*int8" `999 
V L "endptr" 11 1103 "*int8" `1000 
V L "base" 11 1103 "sint8" `1088 
F G "strtoul" 11 1104 "int16(*int8 s,*int8 endptr,sint8 base)" `998 
V L "sc" 11 1105 "*int8" `1085 
V L "s1" 11 1105 "*int8" `1086 
V L "sd" 11 1105 "*int8" `1087 
V L "x" 11 1106 "int16" `1088 
V L "sign" 11 1107 "int8" `1089 
V L "digits" 11 1108 "int8[1]" `1090 
C L "strtoul" 11 397 1 "FUNCTION"
C L "strtoul" 11 397 1 "FUNCTION"
C L "strtoul" 11 397 1 "FUNCTION"
V L "s" 11 1165 "*int8" `995 
V L "endptr" 11 1165 "*int8" `996 
V L "base" 11 1165 "sint8" `1095 
F G "strtol" 11 1166 "sint16(*int8 s,*int8 endptr,sint8 base)" `994 
V L "sc" 11 1167 "*int8" `1092 
V L "s1" 11 1167 "*int8" `1093 
V L "sd" 11 1167 "*int8" `1094 
V L "x" 11 1168 "sint16" `1095 
V L "sign" 11 1169 "int8" `1096 
V L "digits" 11 1170 "int8[1]" `1097 
C L "strtol" 11 397 1 "FUNCTION"
C L "strtol" 11 397 1 "FUNCTION"
C L "strtol" 11 397 1 "FUNCTION"
V L "string" 11 1228 "*int8" `1100 
F G "system" 11 1229 "sint8(*int8 string)" `1010 
V L "s" 11 1233 "*int8" `1100 
V L "n" 11 1233 "int16" `1101 
F G "mblen" 11 1234 "int8(*int8 s,int16 n)" `1099 
V L "pwc" 11 1238 "*int8" `1103 
V L "s" 11 1238 "*int8" `1104 
V L "n" 11 1238 "int16" `1105 
F G "mbtowc" 11 1239 "int8(*int8 pwc,*int8 s,int16 n)" `1102 
V L "s" 11 1244 "*int8" `1107 
V L "wchar" 11 1244 "int8" `1108 
F G "wctomb" 11 1245 "int8(*int8 s,int8 wchar)" `1106 
V L "pwcs" 11 1250 "*int8" `1110 
V L "s" 11 1250 "*int8" `1111 
V L "n" 11 1250 "int16" `1112 
F G "mbstowcs" 11 1251 "int16(*int8 pwcs,*int8 s,int16 n)" `1109 
V L "s" 11 1256 "*int8" `1114 
V L "pwcs" 11 1256 "*int8" `1115 
V L "n" 11 1256 "int16" `1116 
F G "wcstombs" 11 1257 "int16(*int8 s,*int8 pwcs,int16 n)" `1113 
V G "_Randseed" 11 1266 "int32" `1117 
F G "rand" 11 1269 "int16()" `1007 
V L "seed" 11 1274 "int32" `1122 
F G "srand" 11 1275 "void(int32 seed)" `1008 
V L "p1" 11 1284 "*int8" `1122 
V L "p2" 11 1284 "*int8" `1123 
T G "*_Cmpfun" 11 1284 "sint8(*int8 p1,*int8 p2)" `1121 
V L "qdata" 11 1291 "*int8" `1126 
V L "qitems" 11 1291 "int8" `1127 
V L "qsize" 11 1291 "int8" `1128 
V L "cmp" 11 1291 "_Cmpfun" `1129 
F G "qsort" 11 1291 "void(*int8 qdata,int8 qitems,int8 qsize,_Cmpfun cmp)" `1125 
V L "m" 11 1292 "int8" `1130 
V L "j" 11 1292 "int8" `1131 
V L "i" 11 1292 "int8" `1132 
V L "l" 11 1292 "int8" `1133 
V L "done" 11 1293 "int1" `1134 
V L "t" 11 1294 "int8[16]" `1135 
V L "key" 11 1319 "*int8" `1138 
V L "base" 11 1319 "*int8" `1139 
V L "num" 11 1319 "int16" `1140 
V L "width" 11 1319 "int16" `1141 
V L "cmp" 11 1319 "_Cmpfun" `1142 
F G "bsearch" 11 1320 "*int8(*int8 key,*int8 base,int16 num,int16 width,_Cmpfun cmp)" `1137 
V L "p" 11 1321 "*int8" `1143 
V L "q" 11 1321 "*int8" `1144 
V L "n" 11 1322 "int16" `1145 
V L "pivot" 11 1323 "int16" `1146 
V L "val" 11 1324 "sint8" `1147 
C L "bsearch" 11 397 1 "FUNCTION"
F G "MAIN" 0 7 "void()" `1151 
V L "n" 0 8 "int8" `1152 
C L "MAIN" 0 18 1 "FUNCTION"
C L "MAIN" 0 18 2 "FUNCTION"
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep_ulpwu" 1 0
F B "sleep" 0 0
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "scanf" 1 255
F B "fscanf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "profileout" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "interrupt_enabled" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_eeprom" 1 0
F B "write_eeprom" 2 0
F B "read_program_eeprom" 1 0
F B "write_program_eeprom" 2 0
F B "write_program_memory" 4 0
F B "write_program_memory8" 4 0
F B "read_program_memory" 4 0
F B "read_program_memory8" 4 0
F B "read_rom_memory" 3 0
F B "erase_program_eeprom" 1 0
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_b" 1 0
F B "output_c" 1 0
F B "output_d" 1 0
F B "output_e" 1 0
F B "input_a" 0 0
F B "input_b" 0 0
F B "input_c" 0 0
F B "input_d" 0 0
F B "input_e" 0 0
F B "set_tris_a" 1 0
F B "set_tris_b" 1 0
F B "set_tris_c" 1 0
F B "set_tris_d" 1 0
F B "set_tris_e" 1 0
F B "get_tris_a" 0 0
F B "get_tris_b" 0 0
F B "get_tris_c" 0 0
F B "get_tris_d" 0 0
F B "get_tris_e" 0 0
F B "input_change_a" 0 0
F B "input_change_b" 0 0
F B "input_change_c" 0 0
F B "input_change_d" 0 0
F B "input_change_e" 0 0
F B "port_b_pullups" 1 0
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "setup_comparator" 1 0
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 0
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "setup_timer_0" 1 0
F B "setup_vref" 1 0
F B "setup_timer_1" 1 0
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer_2" 3 0
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_ccp1" 1 2
F B "set_pwm1_duty" 1 0
F B "setup_ccp2" 1 0
F B "set_pwm2_duty" 1 0
F B "setup_oscillator" 0 2
F B "setup_spi" 1 0
F B "spi_read" 0 1
F B "spi_write" 1 2
F B "spi_data_is_in" 0 0
F B "setup_spi2" 1 0
F B "spi_read2" 0 1
F B "spi_write2" 1 0
F B "spi_data_is_in2" 0 0
F B "brownout_enable" 1 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
